#include "Robot.h"
#include "Commands/CMG_AutoGenerated.h"

std::shared_ptr<Drivetrain> Robot::drivetrain;
std::unique_ptr<OI> Robot::oi;
std::shared_ptr<frc::Compressor> Robot::compressor;
std::shared_ptr<NavXSubsystem> Robot::navXSubsystem;
std::shared_ptr<UltrasonicSubsystem> Robot::ultrasonicSubsystem;
std::shared_ptr<Cube> Robot::cube;
std::shared_ptr<Climber> Robot::climber;
std::shared_ptr<NavXPIDSource> Robot::navxPidSource;
std::shared_ptr<Elevator> Robot::elevator;

void Robot::RobotInit() {
	std::cout << "Robot Init" << std::endl;
	RobotMap::init();
    drivetrain.reset(new Drivetrain());
    ultrasonicSubsystem.reset(new UltrasonicSubsystem());
    navxPidSource.reset(new NavXPIDSource());
    elevator.reset(new Elevator());
    RobotMap::navXTurnController.reset(new frc::PIDController(
    		NavXSubsystem::NAVX_P_VALUE,
			NavXSubsystem::NAVX_I_VALUE,
			NavXSubsystem::NAVX_D_VALUE,
			NavXSubsystem::NAVX_F_VALUE,
			navxPidSource.get(),
			drivetrain.get()
		));
		RobotMap::navXTurnController->SetInputRange(-180.0f,  180.0f);
		RobotMap::navXTurnController->SetOutputRange(-1.0, 1.0);
		RobotMap::navXTurnController->SetAbsoluteTolerance(0.5f);
		RobotMap::navXTurnController->SetContinuous(true);
	compressor.reset(new frc::Compressor());
	cube.reset(new Cube());
	climber.reset (new Climber());
	oi.reset(new OI());
	lw = frc::LiveWindow::GetInstance();
//	lw->Add(RobotMap::navXTurnController);
	lw->Add(RobotMap::drivetrainChassis);
}
void Robot::RobotPeriodic() {
//	std::cout << "Robto Periodic" << std::endl;
	SmartDashboard::PutBoolean("Is Connected",RobotMap::navX->IsConnected());
	SmartDashboard::PutBoolean("Is Moving",RobotMap::navX->IsMoving());
	SmartDashboard::PutBoolean("Is Rotating",RobotMap::navX->IsRotating());
	SmartDashboard::PutNumber("GetYaw",RobotMap::navX->GetYaw());
	SmartDashboard::PutNumber("GetRoll",RobotMap::navX->GetRoll());
	SmartDashboard::PutNumber("GetPitch",RobotMap::navX->GetPitch());

	SmartDashboard::PutNumber("Subsystem Get Left Encoder", Robot::drivetrain->GetLeftEncoder());
	SmartDashboard::PutNumber("Raw Left Encoder", RobotMap::drivetrainLeftEncoder->Get());
	SmartDashboard::PutNumber("Subsystem Get Right Encoder", Robot::drivetrain->GetRightEncoder());
	SmartDashboard::PutNumber("Raw Right Encoder", RobotMap::drivetrainRightEncoder->Get());

	SmartDashboard::PutNumber("Front Ultrasonic distance", RobotMap::ultrasonicFrontLeft->GetDistance());
	SmartDashboard::PutNumber("Rear Ultrasonic distance", RobotMap::ultrasonicRearLeft->GetDistance());
	SmartDashboard::PutNumber("Average Distance Away", Robot::ultrasonicSubsystem->GetAverageDistance(Util::RobotSide::leftSide));
	SmartDashboard::PutNumber ("Voltage Returned Front", RobotMap::ultrasonicFrontLeft->GetAnalogInput()->GetAverageVoltage());
	SmartDashboard::PutNumber ("Voltage Returned Rear", RobotMap::ultrasonicRearLeft->GetAnalogInput()->GetAverageVoltage());
	SmartDashboard::PutNumber("Starting Distance", Robot::ultrasonicSubsystem->m_startingDistance);

	SmartDashboard::PutBoolean("Top Limit Switch" , RobotMap::elevatorTopSwitch->Get());
	SmartDashboard::PutBoolean("Bottom Limit Switch" , RobotMap::elevatorBottomSwitch->Get());
	SmartDashboard::PutNumber("Raw Elevator Clicks" , RobotMap::elevatorEncoder->Get());


}
void Robot::DisabledInit(){
	compressor->SetClosedLoopControl(false);
	RobotMap::navX->Reset();
	RobotMap::navX->ResetDisplacement();
	drivetrain->SetPIDEnabled(false);
	//drivetrain->GetPIDOutput();
	autonomousCommand.release(); // Make auto command null again.
}

void Robot::DisabledPeriodic() {
//	std::cout << "I'm Disabled!" << std::endl;
	Scheduler::GetInstance()->Run();

}

void Robot::PickAuto() {
	int startingPosition = 1; //1, 2 or 3
	std::string gameMessage = frc::DriverStation::GetInstance().GetGameSpecificMessage();
	if(gameMessage.length() == 0) return;
	std::vector<char> balanceStates(gameMessage.begin(), gameMessage.end());
	bool noSwitch = false;
	bool noScale = false;

	std::vector<frc::Command*> commands;
	if(startingPosition == 2){ // middle
		if(!noSwitch){
			//move forward away from starting wall
			if(balanceStates[1] == 'L'){
				//turn left
				// drive towards and line up with the left side
				// turn right towards the switch
			}else if(balanceStates[1] == 'R') {
				// turn right
				// drive towards and line up with the right side
				// turn left towards the switch
			}
			// run switch cube place auto
		}else{ // We never handle doing the scale from the middle, so it doesn't matter
			// drive forward and cross auto line
		}
	}else{ // left or right
		char sideCheck = 'L';
		if(startingPosition == 3){
			//if we're on the right side, we check R instead of L
			sideCheck = 'R';
		}
		if(!noSwitch && balanceStates[0] == sideCheck){ // If going to switch and we can actually do the switch
			// move to switch (conditionally based on side)
			// place cube
			if(!noScale){
				//navigate to mid-alliance zone
				if(balanceStates[1] == sideCheck){
					// command group for positioning from mid-zone to the closest side of the balance, then placing
				}else{
					// command group for moving across mid-zone to the farthest side of the balance, then placing
				}
			}
			//if we aren't doing the scale, just dont move since we technically crossed the auto line anyway
		}else if(!noScale){
			//move to common baseline zone + move to mid-zone of alliance
			if(balanceStates[1] == sideCheck){
				// command group for positioning from mid-zone to closest side of the balance, then placing
			}else{
				// command group for moving across mid-zone to farthest side of the balance, then placing
			}
		}else{
			// cross baseline
		}
	}
	autonomousCommand.reset(new CMG_AutoGenerated(commands));

}

void Robot::AutonomousInit() {
	Robot::drivetrain->ResetEncoders();
	this->PickAuto();
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	if(autonomousCommand.get() == nullptr){
		this->PickAuto();
	}
	Scheduler::GetInstance()->Run();


}

void Robot::TeleopInit() {
	Robot::drivetrain->ResetEncoders();
	compressor->SetClosedLoopControl(true);
	if (autonomousCommand.get() != nullptr)
			autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
	}

void Robot::TestInit() {
	Robot::drivetrain->ResetEncoders();
	drivetrain->SetPIDEnabled(false);
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();

	drivetrain->SetPIDSetpoint(90);
}

void Robot::TestPeriodic() {
	Scheduler::GetInstance()->Run();

	if(drivetrain->IsPIDEnabled()){
		double output = drivetrain->GetPIDOutput();
		SmartDashboard::PutNumber("PID Input", navxPidSource->PIDGet());
		SmartDashboard::PutNumber("PID Output", output);
		drivetrain->DriveRobotTank(-output,output);
	}else{
		drivetrain->DriveRobotTank(0,0);
	}
	//lw->Run();
}

START_ROBOT_CLASS(Robot);
